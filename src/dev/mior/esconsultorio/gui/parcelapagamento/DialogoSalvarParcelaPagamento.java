package dev.mior.esconsultorio.gui.parcelapagamento;

import dev.mior.esconsultorio.dao.EntityDAO;
import dev.mior.esconsultorio.entity.Cliente;
import dev.mior.esconsultorio.entity.ParcelaPagamento;
import dev.mior.esconsultorio.util.DialogUtil;
import dev.mior.esconsultorio.util.Logger;
import dev.mior.esconsultorio.util.Validar;
import java.util.Date;
import java.util.function.Consumer;
import javax.swing.JOptionPane;

/**
 *
 * @author Mior
 */
public class DialogoSalvarParcelaPagamento extends javax.swing.JDialog {

    /** User variables and constants */
    private ParcelaPagamento parcelaPagamento;
    private boolean cadastrar = false;
    private final Cliente cliente;
    private final Consumer<ParcelaPagamento> action;
    private static final EntityDAO<ParcelaPagamento> DAO = new EntityDAO<>(ParcelaPagamento.class);

    /**
     * Creates new form DialogoSalvarParcelaPagamento
     * @param parent
     * @param modal
     * @param action
     * @param cliente
     * @param valor
     */
    public DialogoSalvarParcelaPagamento(java.awt.Frame parent, boolean modal, Consumer<ParcelaPagamento> action, Cliente cliente, Double valor) {
        super(parent, modal);
        this.action = action;
        this.cliente = cliente;
        this.cadastrar = true;
        initComponents();
        initDataEmissao();
        initValor(valor);
        initCliente();
        DialogUtil.addEscapeListener(this);
    }
    
    /**
     * Creates new form DialogoSalvarParcelaPagamento
     * @param parent
     * @param modal
     * @param action
     * @param cliente
     * @param parcelaPagamento
     */
    public DialogoSalvarParcelaPagamento(java.awt.Frame parent, boolean modal, Consumer<ParcelaPagamento> action, Cliente cliente, ParcelaPagamento parcelaPagamento) {
        super(parent, modal);
        this.action = action;
        this.cadastrar = false;
        this.cliente = cliente;
        this.parcelaPagamento = parcelaPagamento;
        initComponents();
        initCliente();
        initParcelaPagamento();
        DialogUtil.addEscapeListener(this);
    }
    
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpGeral = new javax.swing.JPanel();
        jlCliente = new javax.swing.JLabel();
        jlValorDaParcela = new javax.swing.JLabel();
        jlDataDeEmissao = new javax.swing.JLabel();
        jlDataDePagamento = new javax.swing.JLabel();
        jlDataDeVencimento = new javax.swing.JLabel();
        jlFormaDePagamento = new javax.swing.JLabel();
        jlObservacoes = new javax.swing.JLabel();
        jtfCliente = new javax.swing.JTextField();
        jtfValorDaParcela = new javax.swing.JFormattedTextField();
        jdpDataDeEmissao = new org.jdesktop.swingx.JXDatePicker();
        jdpDataDePagamento = new org.jdesktop.swingx.JXDatePicker();
        jdpDataDeVencimento = new org.jdesktop.swingx.JXDatePicker();
        jcbFormaDePagamento = new javax.swing.JComboBox<>();
        jtfObservacoes = new javax.swing.JTextField();
        jpConfirmar = new javax.swing.JPanel();
        jbtnSalvar = new javax.swing.JButton();
        jbtnCancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle(cadastrar ? "Cadastrar Nova Parcela" : "Editar dados da parcela");
        setBackground(new java.awt.Color(255, 255, 255));
        setName("dialogo"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jpGeral.setBackground(new java.awt.Color(255, 255, 255));

        jlCliente.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jlCliente.setText("Cliente:");

        jlValorDaParcela.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jlValorDaParcela.setText("Valor da Parcela:");

        jlDataDeEmissao.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jlDataDeEmissao.setText("Data de Emissão:");

        jlDataDePagamento.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jlDataDePagamento.setText("Data de Pagamento:");

        jlDataDeVencimento.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jlDataDeVencimento.setText("Data de Vencimento:");

        jlFormaDePagamento.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jlFormaDePagamento.setText("Forma de Pagamento:");

        jlObservacoes.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jlObservacoes.setText("Observações:");

        jtfCliente.setEditable(false);
        jtfCliente.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jtfCliente.setToolTipText("Cliente da Consulta");
        jtfCliente.setMargin(new java.awt.Insets(2, 1, 2, 1));

        jtfValorDaParcela.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        jtfValorDaParcela.setToolTipText("Valor da Parcela");
        jtfValorDaParcela.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jtfValorDaParcela.setMargin(new java.awt.Insets(2, 1, 2, 1));

        jdpDataDeEmissao.setToolTipText("Data da Emissão da Parcela");
        jdpDataDeEmissao.setFocusable(false);
        jdpDataDeEmissao.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jdpDataDeEmissao.setRequestFocusEnabled(false);

        jdpDataDePagamento.setToolTipText("Data de Pagamento da Parcela");
        jdpDataDePagamento.setFocusable(false);
        jdpDataDePagamento.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jdpDataDePagamento.setRequestFocusEnabled(false);

        jdpDataDeVencimento.setToolTipText("Data de Vencimento da Parcela");
        jdpDataDeVencimento.setFocusable(false);
        jdpDataDeVencimento.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jdpDataDeVencimento.setRequestFocusEnabled(false);

        jcbFormaDePagamento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Dinheiro", "Cartão Crédito", "Cartão Débito", "Cheque", "Boleto", "Pila Digital", "Outro" }));
        jcbFormaDePagamento.setToolTipText("Forma de Pagamento da Parcela");

        jtfObservacoes.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jtfObservacoes.setMargin(new java.awt.Insets(2, 1, 2, 1));

        javax.swing.GroupLayout jpGeralLayout = new javax.swing.GroupLayout(jpGeral);
        jpGeral.setLayout(jpGeralLayout);
        jpGeralLayout.setHorizontalGroup(
            jpGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpGeralLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jpGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jlObservacoes)
                    .addGroup(jpGeralLayout.createSequentialGroup()
                        .addGroup(jpGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jlFormaDePagamento)
                            .addComponent(jlDataDeVencimento)
                            .addComponent(jlDataDePagamento)
                            .addComponent(jlDataDeEmissao)
                            .addComponent(jlValorDaParcela)
                            .addComponent(jlCliente))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jdpDataDePagamento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jdpDataDeVencimento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jcbFormaDePagamento, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jtfCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jtfValorDaParcela)
                            .addComponent(jdpDataDeEmissao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jtfObservacoes))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jpGeralLayout.setVerticalGroup(
            jpGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpGeralLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jpGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlCliente)
                    .addComponent(jtfCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jpGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlValorDaParcela)
                    .addComponent(jtfValorDaParcela, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jpGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlDataDeEmissao)
                    .addComponent(jdpDataDeEmissao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jpGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlDataDePagamento)
                    .addComponent(jdpDataDePagamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jpGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlDataDeVencimento)
                    .addComponent(jdpDataDeVencimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jpGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlFormaDePagamento)
                    .addComponent(jcbFormaDePagamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(jlObservacoes)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtfObservacoes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getContentPane().add(jpGeral, java.awt.BorderLayout.CENTER);

        jpConfirmar.setBackground(new java.awt.Color(255, 255, 255));
        jpConfirmar.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 30, 20));

        jbtnSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/save.png"))); // NOI18N
        jbtnSalvar.setMnemonic('S');
        jbtnSalvar.setText("Salvar");
        jbtnSalvar.setFocusPainted(false);
        jbtnSalvar.setFocusable(false);
        jbtnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnSalvarActionPerformed(evt);
            }
        });
        jpConfirmar.add(jbtnSalvar);

        jbtnCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/cancel.png"))); // NOI18N
        jbtnCancelar.setMnemonic('C');
        jbtnCancelar.setText("Cancelar");
        jbtnCancelar.setFocusPainted(false);
        jbtnCancelar.setFocusable(false);
        jbtnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCancelarActionPerformed(evt);
            }
        });
        jpConfirmar.add(jbtnCancelar);

        getContentPane().add(jpConfirmar, java.awt.BorderLayout.PAGE_END);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void initCliente() {
        if (cliente != null) {
            jtfCliente.setText(cliente.getNome());
        }
    }
    
    private void initDataEmissao() {
        Date dataEmissao = new Date();
        //dataEmissao.setHours(0);
        //dataEmissao.setMinutes(0);
        jdpDataDeEmissao.setDate(dataEmissao);
    }
    
    private void initValor(Double valor) {
        jtfValorDaParcela.setValue(valor);
    }
    
    private void initParcelaPagamento() {
        if (parcelaPagamento != null) {
            jtfValorDaParcela.setValue(parcelaPagamento.getValor());
            jtfObservacoes.setText(parcelaPagamento.getObservacoes());
            if (parcelaPagamento.getDataEmissao() != null) 
                jdpDataDeEmissao.setDate(parcelaPagamento.getDataEmissao());
            if (parcelaPagamento.getDataPagamento() != null)
                jdpDataDePagamento.setDate(parcelaPagamento.getDataPagamento());
            if (parcelaPagamento.getDataVencimento() != null)
                jdpDataDeVencimento.setDate(parcelaPagamento.getDataVencimento());
            jcbFormaDePagamento.setSelectedItem(parcelaPagamento.getFormaPagamento());
        }
    }
    
    private void jbtnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnSalvarActionPerformed
        String valor = jtfValorDaParcela.getText().trim().replace(",", ".");
        String observacoes = jtfObservacoes.getText().trim();
        String formaPagamento = jcbFormaDePagamento.getSelectedItem().toString();
        Date dataEmissao = jdpDataDeEmissao.getDate();
        Date dataVencimento = jdpDataDeVencimento.getDate();
        Date dataPagamento = jdpDataDePagamento.getDate();
        
        if (parcelaPagamento == null) {
            parcelaPagamento = new ParcelaPagamento();
        }
        
        if (dataEmissao == null) {
            JOptionPane.showMessageDialog(this, "Você deve informar a data de emissão da parcela!", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        } else {
            parcelaPagamento.setDataEmissao(dataEmissao);
        }
        
        if (dataVencimento != null) {
            if (dataEmissao.getTime() > dataVencimento.getTime()) {
                JOptionPane.showMessageDialog(this, "As data da parcela não podem ser inconsistentes.\nA data de vencimento esta vindo antes da data de emissão!", "Erro", JOptionPane.ERROR_MESSAGE);
                return;
            } else {
                parcelaPagamento.setDataVencimento(dataVencimento);
            }
        }
        
        if (dataPagamento != null) {
            if (dataEmissao.getTime() > dataPagamento.getTime()) {
                JOptionPane.showMessageDialog(this, "As data da parcela não podem ser inconsistentes.\nA data de pagamento esta vindo antes da data de emissão!", "Erro", JOptionPane.ERROR_MESSAGE);
                return;
            } else {
                parcelaPagamento.setDataPagamento(dataPagamento);
            }
        }
        
        if (valor.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Você deve informar o valor da parcela do pagamento!", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        } else if (!Validar.numero(valor) || Double.parseDouble(valor) < 0) {
            JOptionPane.showMessageDialog(this, "O valor informado do parcela não é valido!", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        } else {
            parcelaPagamento.setValor(Double.parseDouble(valor));
        }
        
        if (observacoes != null) {
            parcelaPagamento.setObservacoes(observacoes);
        }
        
        if (formaPagamento != null) {
            parcelaPagamento.setFormaPagamento(formaPagamento);
        }
                
        try {
            if (cadastrar) {
                DAO.create(parcelaPagamento);
                JOptionPane.showMessageDialog(this, "Parcela cadastrada com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
            } else {
                DAO.edit(parcelaPagamento);
                JOptionPane.showMessageDialog(this, "Dados da parcela editados com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
            }
            if (action != null) {
                action.accept(parcelaPagamento);
            }
            this.dispose();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao tentar salvar a parcela!", "Erro Desconhecido", JOptionPane.ERROR_MESSAGE);
            Logger.save(e);
        }        
    }//GEN-LAST:event_jbtnSalvarActionPerformed
        
    private boolean camposEstaoVazios() {
        String observacoes = jtfObservacoes.getText().replace(" ", "");
        String valor = jtfValorDaParcela.getText().replace(" ", "");
        Date dataPagamento = jdpDataDePagamento.getDate();
        Date dataVencimento = jdpDataDeVencimento.getDate();
        return cadastrar && observacoes.isEmpty() && valor.isEmpty() && dataPagamento == null && dataVencimento == null;
    }
    
    private void showQuitDialog() {
        String mensagem = cadastrar ? "Você realmente deseja cancelar o cadastro da parcela?" : "Você realmente deseja cancelar a edição da parcela?";
        if (camposEstaoVazios() || JOptionPane.showConfirmDialog(this, mensagem, "Confirmação", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
            this.dispose();
        }
    }
    
    private void jbtnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCancelarActionPerformed
        showQuitDialog();
    }//GEN-LAST:event_jbtnCancelarActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        showQuitDialog();
    }//GEN-LAST:event_formWindowClosing

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbtnCancelar;
    private javax.swing.JButton jbtnSalvar;
    private javax.swing.JComboBox<String> jcbFormaDePagamento;
    private org.jdesktop.swingx.JXDatePicker jdpDataDeEmissao;
    private org.jdesktop.swingx.JXDatePicker jdpDataDePagamento;
    private org.jdesktop.swingx.JXDatePicker jdpDataDeVencimento;
    private javax.swing.JLabel jlCliente;
    private javax.swing.JLabel jlDataDeEmissao;
    private javax.swing.JLabel jlDataDePagamento;
    private javax.swing.JLabel jlDataDeVencimento;
    private javax.swing.JLabel jlFormaDePagamento;
    private javax.swing.JLabel jlObservacoes;
    private javax.swing.JLabel jlValorDaParcela;
    private javax.swing.JPanel jpConfirmar;
    private javax.swing.JPanel jpGeral;
    private javax.swing.JTextField jtfCliente;
    private javax.swing.JTextField jtfObservacoes;
    private javax.swing.JFormattedTextField jtfValorDaParcela;
    // End of variables declaration//GEN-END:variables

}