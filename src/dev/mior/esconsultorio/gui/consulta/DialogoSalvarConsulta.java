package dev.mior.esconsultorio.gui.consulta;

import dev.mior.esconsultorio.dao.EntityDAO;
import dev.mior.esconsultorio.defaults.Defaults;
import dev.mior.esconsultorio.entity.Cliente;
import dev.mior.esconsultorio.entity.Consulta;
import dev.mior.esconsultorio.entity.ParcelaPagamento;
import dev.mior.esconsultorio.entity.Servico;
import dev.mior.esconsultorio.gui.cliente.DialogoBuscarCliente;
import dev.mior.esconsultorio.gui.cliente.DialogoSalvarCliente;
import dev.mior.esconsultorio.gui.parcelapagamento.DialogoSalvarParcelaPagamento;
import dev.mior.esconsultorio.gui.servico.DialogoBuscarServico;
import dev.mior.esconsultorio.gui.servico.DialogoSalvarServico;
import dev.mior.esconsultorio.util.DialogUtil;
import dev.mior.esconsultorio.util.Logger;
import dev.mior.esconsultorio.util.Validar;
import java.awt.Frame;
import java.util.ArrayList;
import java.util.Date;
import java.util.function.Consumer;
import javax.swing.JOptionPane;

/**
 *
 * @author Mior
 */
public class DialogoSalvarConsulta extends javax.swing.JDialog {

    /** User variables and constants */
    private Cliente cliente;
    private Consulta consulta;
    private Double valorTotal = 0D;
    private Date data = new Date();
    private boolean cadastrar = false;
    private final Consumer<Consulta> action;
    private static final EntityDAO<Consulta> DAO = new EntityDAO<>(Consulta.class);
    
    /**
     * Creates new form DialogoSalvarConsulta
     * @param parent
     * @param modal
     * @param action
     * @param data
     */
    public DialogoSalvarConsulta(java.awt.Frame parent, boolean modal, Consumer<Consulta> action, Date data) {
        super(parent, modal);
        this.action = action;
        this.cadastrar = true;
        this.data = data;
        initComponents();
        DialogUtil.addEscapeListener(this);
    }
    
    /**
     * Creates new form DialogoSalvarConsulta
     * @param parent
     * @param modal
     * @param action
     * @param consulta
     */
    public DialogoSalvarConsulta(java.awt.Frame parent, boolean modal, Consumer<Consulta> action, Consulta consulta) {
        super(parent, modal);
        this.action = action;
        this.consulta = consulta;
        this.cadastrar = false;
        initComponents();
        initConsulta();
        DialogUtil.addEscapeListener(this);
    }
    
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        servicos = org.jdesktop.observablecollections.ObservableCollections.observableList(new ArrayList<>());
        pagamentos = org.jdesktop.observablecollections.ObservableCollections.observableList(new ArrayList<>());
        jpGeral = new javax.swing.JPanel();
        jlObservacoes = new javax.swing.JLabel();
        jlDataDaConsulta = new javax.swing.JLabel();
        jlHoraInicial = new javax.swing.JLabel();
        jlHoraFinal = new javax.swing.JLabel();
        jlCliente = new javax.swing.JLabel();
        jdpDataDaConsulta = new org.jdesktop.swingx.JXDatePicker();
        jtfHoraInicial = new javax.swing.JFormattedTextField();
        jtfCliente = new javax.swing.JTextField();
        jtfHoraFinal = new javax.swing.JFormattedTextField();
        jbtnBuscarCliente = new javax.swing.JButton();
        jbtnNovoCliente = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtfObservacoes = new javax.swing.JTextArea();
        jlValorTotal = new javax.swing.JLabel();
        jtfValorTotal = new javax.swing.JTextField();
        jpServicos = new javax.swing.JPanel();
        jpDescricaoServicos = new javax.swing.JPanel();
        jlServicosPrestadosNaConsulta = new javax.swing.JLabel();
        jpListaDeServicos = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtServicos = new javax.swing.JTable();
        jpAcoesServicos = new javax.swing.JPanel();
        jbtnAdicionarServico = new javax.swing.JButton();
        jbtnBuscarServico = new javax.swing.JButton();
        jbtnRemoverServico = new javax.swing.JButton();
        jpConfirmarEPagamentos = new javax.swing.JPanel();
        jpEspacador = new javax.swing.JPanel();
        jpPagamentos = new javax.swing.JPanel();
        jpDescricaoPagamentos = new javax.swing.JPanel();
        jlPagamentosDaConsulta = new javax.swing.JLabel();
        jpListaDePagamentos = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtPagamentos = new javax.swing.JTable();
        jpAcoesPagamentos = new javax.swing.JPanel();
        jbtnPagamentoUnico = new javax.swing.JButton();
        jbtnGerarParcelas = new javax.swing.JButton();
        jbtnRemoverParcela = new javax.swing.JButton();
        jbtnEditarParcela = new javax.swing.JToggleButton();
        jpConfirmar = new javax.swing.JPanel();
        jbtnSalvar = new javax.swing.JButton();
        jbtnCancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle(cadastrar ? "Cadastrar Nova Consulta" : "Editar dados da Consulta");
        setBackground(new java.awt.Color(255, 255, 255));
        setName("dialogo"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jpGeral.setBackground(new java.awt.Color(255, 255, 255));

        jlObservacoes.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jlObservacoes.setText("Observações:");

        jlDataDaConsulta.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jlDataDaConsulta.setText("Data da Consulta:");

        jlHoraInicial.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jlHoraInicial.setText("Hora Inicial:");

        jlHoraFinal.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jlHoraFinal.setText("Hora Final:");

        jlCliente.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jlCliente.setText("Cliente:");

        jdpDataDaConsulta.setToolTipText("Data da Consulta");
        jdpDataDaConsulta.setDate(data);
        jdpDataDaConsulta.setFocusable(false);
        jdpDataDaConsulta.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jdpDataDaConsulta.setRequestFocusEnabled(false);

        try {
            jtfHoraInicial.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jtfHoraInicial.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtfHoraInicial.setToolTipText("Hora Inicial da Consulta");
        jtfHoraInicial.setFocusLostBehavior(javax.swing.JFormattedTextField.PERSIST);
        jtfHoraInicial.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jtfHoraInicial.setMargin(new java.awt.Insets(2, 1, 2, 1));

        jtfCliente.setEditable(false);
        jtfCliente.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jtfCliente.setToolTipText("Cliente da Consulta");
        jtfCliente.setMargin(new java.awt.Insets(2, 1, 2, 1));

        try {
            jtfHoraFinal.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jtfHoraFinal.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtfHoraFinal.setToolTipText("Hora Final da Consulta");
        jtfHoraFinal.setFocusLostBehavior(javax.swing.JFormattedTextField.PERSIST);
        jtfHoraFinal.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jtfHoraFinal.setMargin(new java.awt.Insets(2, 1, 2, 1));

        jbtnBuscarCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/find.png"))); // NOI18N
        jbtnBuscarCliente.setToolTipText("Buscar Cliente Cadastrado");
        jbtnBuscarCliente.setFocusPainted(false);
        jbtnBuscarCliente.setFocusable(false);
        jbtnBuscarCliente.setMargin(new java.awt.Insets(2, 4, 1, 4));
        jbtnBuscarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnBuscarClienteActionPerformed(evt);
            }
        });

        jbtnNovoCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/add.png"))); // NOI18N
        jbtnNovoCliente.setToolTipText("Cadastrar Novo Cliente");
        jbtnNovoCliente.setFocusPainted(false);
        jbtnNovoCliente.setFocusable(false);
        jbtnNovoCliente.setMargin(new java.awt.Insets(2, 4, 1, 4));
        jbtnNovoCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnNovoClienteActionPerformed(evt);
            }
        });

        jtfObservacoes.setColumns(20);
        jtfObservacoes.setLineWrap(true);
        jtfObservacoes.setRows(5);
        jScrollPane3.setViewportView(jtfObservacoes);

        jlValorTotal.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jlValorTotal.setText("Valor Total:");

        jtfValorTotal.setEditable(false);
        jtfValorTotal.setText("R$ 0,00");
        jtfValorTotal.setMargin(new java.awt.Insets(2, 1, 2, 1));

        javax.swing.GroupLayout jpGeralLayout = new javax.swing.GroupLayout(jpGeral);
        jpGeral.setLayout(jpGeralLayout);
        jpGeralLayout.setHorizontalGroup(
            jpGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpGeralLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jpGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jpGeralLayout.createSequentialGroup()
                        .addGroup(jpGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jlDataDaConsulta)
                            .addComponent(jlHoraInicial))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpGeralLayout.createSequentialGroup()
                                .addComponent(jtfHoraInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jlHoraFinal)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jtfHoraFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jdpDataDaConsulta, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)))
                    .addGroup(jpGeralLayout.createSequentialGroup()
                        .addGroup(jpGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jlValorTotal)
                            .addComponent(jlCliente))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jtfCliente, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                            .addComponent(jtfValorTotal))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbtnBuscarCliente)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbtnNovoCliente)))
                .addGap(18, 18, 18)
                .addGroup(jpGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlObservacoes)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(535, Short.MAX_VALUE))
        );
        jpGeralLayout.setVerticalGroup(
            jpGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpGeralLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlDataDaConsulta)
                    .addComponent(jdpDataDaConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlObservacoes))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpGeralLayout.createSequentialGroup()
                        .addGroup(jpGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jlHoraInicial)
                                .addComponent(jtfHoraInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jpGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jlHoraFinal)
                                .addComponent(jtfHoraFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jpGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jbtnBuscarCliente, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jbtnNovoCliente)
                            .addGroup(jpGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jlCliente)
                                .addComponent(jtfCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jpGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jlValorTotal)
                            .addComponent(jtfValorTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jdpDataDaConsulta.getEditor().setEditable(false);

        getContentPane().add(jpGeral, java.awt.BorderLayout.PAGE_START);

        jpServicos.setBackground(new java.awt.Color(255, 255, 255));
        jpServicos.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jpServicos.setLayout(new java.awt.BorderLayout());

        jpDescricaoServicos.setBackground(new java.awt.Color(255, 255, 255));

        jlServicosPrestadosNaConsulta.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jlServicosPrestadosNaConsulta.setText("Serviços prestados na consulta:");

        javax.swing.GroupLayout jpDescricaoServicosLayout = new javax.swing.GroupLayout(jpDescricaoServicos);
        jpDescricaoServicos.setLayout(jpDescricaoServicosLayout);
        jpDescricaoServicosLayout.setHorizontalGroup(
            jpDescricaoServicosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpDescricaoServicosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlServicosPrestadosNaConsulta)
                .addContainerGap(890, Short.MAX_VALUE))
        );
        jpDescricaoServicosLayout.setVerticalGroup(
            jpDescricaoServicosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpDescricaoServicosLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jlServicosPrestadosNaConsulta)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jpServicos.add(jpDescricaoServicos, java.awt.BorderLayout.PAGE_START);

        jpListaDeServicos.setBackground(new java.awt.Color(255, 255, 255));
        jpListaDeServicos.setMaximumSize(new java.awt.Dimension(618, 110));

        jScrollPane1.setPreferredSize(new java.awt.Dimension(618, 110));

        jtServicos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, servicos, jtServicos);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create(" ${descricao}"));
        columnBinding.setColumnName("Descricao");
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${produtos}"));
        columnBinding.setColumnName("Produtos");
        columnBinding.setColumnClass(java.util.List.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${valor}"));
        columnBinding.setColumnName("Valor");
        columnBinding.setColumnClass(Double.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${produtos}"));
        columnBinding.setColumnName("Valor Produtos");
        columnBinding.setColumnClass(java.util.List.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create(" ${tipoServico}"));
        columnBinding.setColumnName("Tipo Servico");
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jScrollPane1.setViewportView(jtServicos);
        if (jtServicos.getColumnModel().getColumnCount() > 0) {
            jtServicos.getColumnModel().getColumn(0).setCellRenderer(new dev.mior.esconsultorio.gui.renderer.AreaDeTextoRenderer());
            jtServicos.getColumnModel().getColumn(1).setCellRenderer(new dev.mior.esconsultorio.gui.renderer.ListaRenderer());
            jtServicos.getColumnModel().getColumn(2).setMinWidth(85);
            jtServicos.getColumnModel().getColumn(2).setPreferredWidth(85);
            jtServicos.getColumnModel().getColumn(2).setMaxWidth(125);
            jtServicos.getColumnModel().getColumn(2).setCellRenderer(new dev.mior.esconsultorio.gui.renderer.DinheiroRenderer());
            jtServicos.getColumnModel().getColumn(3).setMinWidth(85);
            jtServicos.getColumnModel().getColumn(3).setPreferredWidth(85);
            jtServicos.getColumnModel().getColumn(3).setMaxWidth(125);
            jtServicos.getColumnModel().getColumn(3).setCellRenderer(new dev.mior.esconsultorio.gui.renderer.ValorProdutosRenderer());
        }

        javax.swing.GroupLayout jpListaDeServicosLayout = new javax.swing.GroupLayout(jpListaDeServicos);
        jpListaDeServicos.setLayout(jpListaDeServicosLayout);
        jpListaDeServicosLayout.setHorizontalGroup(
            jpListaDeServicosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1121, Short.MAX_VALUE)
        );
        jpListaDeServicosLayout.setVerticalGroup(
            jpListaDeServicosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
        );

        jpServicos.add(jpListaDeServicos, java.awt.BorderLayout.CENTER);

        jpAcoesServicos.setBackground(new java.awt.Color(255, 255, 255));
        jpAcoesServicos.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 30, 15));

        jbtnAdicionarServico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/add.png"))); // NOI18N
        jbtnAdicionarServico.setMnemonic('A');
        jbtnAdicionarServico.setText("Adicionar Serviço");
        jbtnAdicionarServico.setToolTipText("");
        jbtnAdicionarServico.setFocusPainted(false);
        jbtnAdicionarServico.setFocusable(false);
        jbtnAdicionarServico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnAdicionarServicoActionPerformed(evt);
            }
        });
        jpAcoesServicos.add(jbtnAdicionarServico);

        jbtnBuscarServico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/find.png"))); // NOI18N
        jbtnBuscarServico.setMnemonic('B');
        jbtnBuscarServico.setText("Buscar Serviço");
        jbtnBuscarServico.setFocusPainted(false);
        jbtnBuscarServico.setFocusable(false);
        jbtnBuscarServico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnBuscarServicoActionPerformed(evt);
            }
        });
        jpAcoesServicos.add(jbtnBuscarServico);

        jbtnRemoverServico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/delete.png"))); // NOI18N
        jbtnRemoverServico.setMnemonic('R');
        jbtnRemoverServico.setText("Remover Serviço");
        jbtnRemoverServico.setFocusPainted(false);
        jbtnRemoverServico.setFocusable(false);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jtServicos, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), jbtnRemoverServico, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jbtnRemoverServico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnRemoverServicoActionPerformed(evt);
            }
        });
        jpAcoesServicos.add(jbtnRemoverServico);

        jpServicos.add(jpAcoesServicos, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(jpServicos, java.awt.BorderLayout.CENTER);

        jpConfirmarEPagamentos.setBackground(new java.awt.Color(255, 255, 255));
        jpConfirmarEPagamentos.setLayout(new java.awt.BorderLayout());

        jpEspacador.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jpEspacadorLayout = new javax.swing.GroupLayout(jpEspacador);
        jpEspacador.setLayout(jpEspacadorLayout);
        jpEspacadorLayout.setHorizontalGroup(
            jpEspacadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1125, Short.MAX_VALUE)
        );
        jpEspacadorLayout.setVerticalGroup(
            jpEspacadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );

        jpConfirmarEPagamentos.add(jpEspacador, java.awt.BorderLayout.PAGE_START);

        jpPagamentos.setBackground(new java.awt.Color(255, 255, 255));
        jpPagamentos.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jpPagamentos.setLayout(new java.awt.BorderLayout());

        jpDescricaoPagamentos.setBackground(new java.awt.Color(255, 255, 255));

        jlPagamentosDaConsulta.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jlPagamentosDaConsulta.setText("Pagamentos da consulta:");

        javax.swing.GroupLayout jpDescricaoPagamentosLayout = new javax.swing.GroupLayout(jpDescricaoPagamentos);
        jpDescricaoPagamentos.setLayout(jpDescricaoPagamentosLayout);
        jpDescricaoPagamentosLayout.setHorizontalGroup(
            jpDescricaoPagamentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpDescricaoPagamentosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlPagamentosDaConsulta)
                .addContainerGap(935, Short.MAX_VALUE))
        );
        jpDescricaoPagamentosLayout.setVerticalGroup(
            jpDescricaoPagamentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpDescricaoPagamentosLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jlPagamentosDaConsulta)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jpPagamentos.add(jpDescricaoPagamentos, java.awt.BorderLayout.PAGE_START);

        jtPagamentos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, pagamentos, jtPagamentos);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${dataEmissao}"));
        columnBinding.setColumnName("Data Emissao");
        columnBinding.setColumnClass(java.util.Date.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${dataPagamento}"));
        columnBinding.setColumnName("Data Pagamento");
        columnBinding.setColumnClass(java.util.Date.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${dataVencimento}"));
        columnBinding.setColumnName("Data Vencimento");
        columnBinding.setColumnClass(java.util.Date.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create(" ${valor}"));
        columnBinding.setColumnName("Valor");
        columnBinding.setColumnClass(Double.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${formaPagamento}"));
        columnBinding.setColumnName("Forma Pagamento");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${parcelaPagamento}"));
        columnBinding.setColumnName("Status do Pagamento");
        columnBinding.setColumnClass(dev.mior.esconsultorio.entity.ParcelaPagamento.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${observacoes}"));
        columnBinding.setColumnName("Observacoes");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jScrollPane2.setViewportView(jtPagamentos);
        if (jtPagamentos.getColumnModel().getColumnCount() > 0) {
            jtPagamentos.getColumnModel().getColumn(0).setMinWidth(120);
            jtPagamentos.getColumnModel().getColumn(0).setPreferredWidth(120);
            jtPagamentos.getColumnModel().getColumn(0).setMaxWidth(120);
            jtPagamentos.getColumnModel().getColumn(0).setCellRenderer(new dev.mior.esconsultorio.gui.renderer.DataRenderer());
            jtPagamentos.getColumnModel().getColumn(1).setMinWidth(120);
            jtPagamentos.getColumnModel().getColumn(1).setPreferredWidth(120);
            jtPagamentos.getColumnModel().getColumn(1).setMaxWidth(120);
            jtPagamentos.getColumnModel().getColumn(1).setCellRenderer(new dev.mior.esconsultorio.gui.renderer.DataRenderer());
            jtPagamentos.getColumnModel().getColumn(2).setMinWidth(120);
            jtPagamentos.getColumnModel().getColumn(2).setPreferredWidth(120);
            jtPagamentos.getColumnModel().getColumn(2).setMaxWidth(120);
            jtPagamentos.getColumnModel().getColumn(2).setCellRenderer(new dev.mior.esconsultorio.gui.renderer.DataRenderer());
            jtPagamentos.getColumnModel().getColumn(3).setMinWidth(85);
            jtPagamentos.getColumnModel().getColumn(3).setPreferredWidth(85);
            jtPagamentos.getColumnModel().getColumn(3).setMaxWidth(125);
            jtPagamentos.getColumnModel().getColumn(3).setCellRenderer(new dev.mior.esconsultorio.gui.renderer.DinheiroRenderer());
            jtPagamentos.getColumnModel().getColumn(4).setMinWidth(150);
            jtPagamentos.getColumnModel().getColumn(4).setPreferredWidth(150);
            jtPagamentos.getColumnModel().getColumn(4).setMaxWidth(150);
            jtPagamentos.getColumnModel().getColumn(4).setCellRenderer(new dev.mior.esconsultorio.gui.renderer.TextoCentralizadoRenderer());
            jtPagamentos.getColumnModel().getColumn(5).setMinWidth(150);
            jtPagamentos.getColumnModel().getColumn(5).setPreferredWidth(150);
            jtPagamentos.getColumnModel().getColumn(5).setMaxWidth(150);
            jtPagamentos.getColumnModel().getColumn(5).setCellRenderer(new dev.mior.esconsultorio.gui.renderer.StatusPagamentoRenderer());
            jtPagamentos.getColumnModel().getColumn(6).setCellRenderer(new dev.mior.esconsultorio.gui.renderer.AreaDeTextoRenderer());
        }

        javax.swing.GroupLayout jpListaDePagamentosLayout = new javax.swing.GroupLayout(jpListaDePagamentos);
        jpListaDePagamentos.setLayout(jpListaDePagamentosLayout);
        jpListaDePagamentosLayout.setHorizontalGroup(
            jpListaDePagamentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1121, Short.MAX_VALUE)
        );
        jpListaDePagamentosLayout.setVerticalGroup(
            jpListaDePagamentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
        );

        jpPagamentos.add(jpListaDePagamentos, java.awt.BorderLayout.CENTER);

        jpAcoesPagamentos.setBackground(new java.awt.Color(255, 255, 255));
        jpAcoesPagamentos.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 30, 15));

        jbtnPagamentoUnico.setMnemonic('P');
        jbtnPagamentoUnico.setText("Pagamento Unico");
        jbtnPagamentoUnico.setToolTipText("");
        jbtnPagamentoUnico.setFocusPainted(false);
        jbtnPagamentoUnico.setFocusable(false);
        jbtnPagamentoUnico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnPagamentoUnicoActionPerformed(evt);
            }
        });
        jpAcoesPagamentos.add(jbtnPagamentoUnico);

        jbtnGerarParcelas.setMnemonic('G');
        jbtnGerarParcelas.setText("Gerar Parcelas");
        jbtnGerarParcelas.setFocusPainted(false);
        jbtnGerarParcelas.setFocusable(false);
        jbtnGerarParcelas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnGerarParcelasActionPerformed(evt);
            }
        });
        jpAcoesPagamentos.add(jbtnGerarParcelas);

        jbtnRemoverParcela.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/delete.png"))); // NOI18N
        jbtnRemoverParcela.setText("Remover Parcela");
        jbtnRemoverParcela.setFocusPainted(false);
        jbtnRemoverParcela.setFocusable(false);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jtPagamentos, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), jbtnRemoverParcela, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jbtnRemoverParcela.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnRemoverParcelaActionPerformed(evt);
            }
        });
        jpAcoesPagamentos.add(jbtnRemoverParcela);

        jbtnEditarParcela.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/edit.png"))); // NOI18N
        jbtnEditarParcela.setMnemonic('E');
        jbtnEditarParcela.setText("Editar Parcela");
        jbtnEditarParcela.setToolTipText("");
        jbtnEditarParcela.setFocusPainted(false);
        jbtnEditarParcela.setFocusable(false);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jtPagamentos, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), jbtnEditarParcela, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jbtnEditarParcela.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnEditarParcelaActionPerformed(evt);
            }
        });
        jpAcoesPagamentos.add(jbtnEditarParcela);

        jpPagamentos.add(jpAcoesPagamentos, java.awt.BorderLayout.PAGE_END);

        jpConfirmarEPagamentos.add(jpPagamentos, java.awt.BorderLayout.CENTER);

        jpConfirmar.setBackground(new java.awt.Color(255, 255, 255));
        jpConfirmar.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 30, 15));

        jbtnSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/save.png"))); // NOI18N
        jbtnSalvar.setMnemonic('S');
        jbtnSalvar.setText("Salvar");
        jbtnSalvar.setFocusPainted(false);
        jbtnSalvar.setFocusable(false);
        jbtnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnSalvarActionPerformed(evt);
            }
        });
        jpConfirmar.add(jbtnSalvar);

        jbtnCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/cancel.png"))); // NOI18N
        jbtnCancelar.setMnemonic('C');
        jbtnCancelar.setText("Cancelar");
        jbtnCancelar.setFocusPainted(false);
        jbtnCancelar.setFocusable(false);
        jbtnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCancelarActionPerformed(evt);
            }
        });
        jpConfirmar.add(jbtnCancelar);

        jpConfirmarEPagamentos.add(jpConfirmar, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(jpConfirmarEPagamentos, java.awt.BorderLayout.PAGE_END);

        bindingGroup.bind();

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void initConsulta() {
        if (consulta != null) {
            data = consulta.getHoraFinal();
            cliente = consulta.getCliente();
            jtfObservacoes.setText(consulta.getObservacoes());
            jdpDataDaConsulta.setDate(consulta.getHoraInicial());
            jtfHoraInicial.setText(Defaults.H_FORMAT.format(consulta.getHoraInicial()));
            jtfHoraFinal.setText(Defaults.H_FORMAT.format(consulta.getHoraFinal()));
            jtfCliente.setText(consulta.getCliente().getNome());
            if (consulta.getPagamentos() != null) 
                pagamentos.addAll(consulta.getPagamentos());
            if (consulta.getServicos() != null) 
                servicos.addAll(consulta.getServicos());
            for (Servico s : servicos)
                valorTotal += (s.getValor() + s.getValorProdutos());
            jtfValorTotal.setText(Defaults.M_FORMAT.format(valorTotal));
        }
    }
    
    private void jbtnBuscarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnBuscarClienteActionPerformed
        new DialogoBuscarCliente((Frame) getParent(), true, (c) -> {
            this.cliente = c;
            this.jtfCliente.setText(c.getNome());
        }).setVisible(true);
    }//GEN-LAST:event_jbtnBuscarClienteActionPerformed

    private void jbtnNovoClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnNovoClienteActionPerformed
        new DialogoSalvarCliente((Frame) getParent(), true, (c) -> {
            this.cliente = c;
            this.jtfCliente.setText(c.getNome());
        }).setVisible(true);
    }//GEN-LAST:event_jbtnNovoClienteActionPerformed
    
    private boolean camposEstaoVazios() {
        String observacoes = jtfObservacoes.getText().replace(" ", "");
        String hora = jtfHoraInicial.getText().replace(" ", "");
        return cadastrar && cliente == null && observacoes.isEmpty() && hora.length() < 3;
    }
    
    private void showQuitDialog() {
        String mensagem = cadastrar ? "Você realmente deseja cancelar o cadastro da consulta?" : "Você realmente deseja cancelar a edição dos dados da consulta?";
        if (camposEstaoVazios() || JOptionPane.showConfirmDialog(this, mensagem, "Confirmação", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
            this.dispose();
        }
    }
    
    private void jbtnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCancelarActionPerformed
        showQuitDialog();
    }//GEN-LAST:event_jbtnCancelarActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        showQuitDialog();
    }//GEN-LAST:event_formWindowClosing

    private void jbtnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnSalvarActionPerformed
        Date dataConsulta = jdpDataDaConsulta.getDate();
        String[] horaInicial = jtfHoraInicial.getText().trim().split(":");
        String[] horaFinal = jtfHoraFinal.getText().trim().split(":");
        String observacoes = jtfObservacoes.getText().trim();
        
        if (consulta == null) {
            consulta = new Consulta();
        }

        if (cliente == null) {
            JOptionPane.showMessageDialog(this, "Você deve informar o cliente da consulta!", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        } else {
            consulta.setCliente(cliente);
        }
        
        if (horaInicial.length != 2 || !Validar.hora(horaInicial[0]) || !Validar.minuto(horaInicial[1])) {
            JOptionPane.showMessageDialog(this, "A Hora Inicial informada não é valida!", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        } else {
            Date dataHoraInicial = new Date(dataConsulta.getTime());
            dataHoraInicial.setHours(Integer.valueOf(horaInicial[0]));
            dataHoraInicial.setMinutes(Integer.valueOf(horaInicial[1]));
            dataHoraInicial.setSeconds(0);
            consulta.setHoraInicial(dataHoraInicial);
        }
        
        if (horaFinal.length != 2 || !Validar.hora(horaFinal[0]) || !Validar.minuto(horaFinal[1])) {
            JOptionPane.showMessageDialog(this, "A Hora Final informada não é valida!", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        } else {
            Date dataHoraFinal = new Date(dataConsulta.getTime());
            dataHoraFinal.setHours(Integer.valueOf(horaFinal[0]));
            dataHoraFinal.setMinutes(Integer.valueOf(horaFinal[1]));
            dataHoraFinal.setSeconds(0);
            consulta.setHoraFinal(dataHoraFinal);
        }
        
        if (consulta.getHoraInicial().getTime() > consulta.getHoraFinal().getTime()) {
            JOptionPane.showMessageDialog(this, "Os horarios da consulta não podem ser inconsistentes.\nO horario final esta vindo antes do inicial!", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if (servicos != null) {
            consulta.setServicos(servicos);
        }
        
        if (pagamentos != null) {
            consulta.setPagamentos(pagamentos);
        }
        
        if (observacoes != null) {
            consulta.setObservacoes(observacoes);
        }
        
        try {
            if (cadastrar) {
                DAO.create(consulta);
                JOptionPane.showMessageDialog(this, "Consulta cadastrada com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
            } else {
                DAO.edit(consulta);
                JOptionPane.showMessageDialog(this, "Dados da consulta editados com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
            }
            if (action != null) {
                action.accept(consulta);
            }
            this.dispose();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao tentar salvar a consulta!", "Erro Desconhecido", JOptionPane.ERROR_MESSAGE);
            Logger.save(e);
        }
    }//GEN-LAST:event_jbtnSalvarActionPerformed

    private void jbtnAdicionarServicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnAdicionarServicoActionPerformed
        new DialogoSalvarServico((Frame) getParent(), true, (s) -> {
            if (!servicos.contains(s)) {
                servicos.add(s);
                valorTotal += (s.getValor() + s.getValorProdutos());
                jtfValorTotal.setText(Defaults.M_FORMAT.format(valorTotal));
            }
        }).setVisible(true);
    }//GEN-LAST:event_jbtnAdicionarServicoActionPerformed

    private void jbtnBuscarServicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnBuscarServicoActionPerformed
        new DialogoBuscarServico((Frame) getParent(), true, (s) -> {
            if (!servicos.contains(s)) {
                servicos.add(s);
                valorTotal += (s.getValor() + s.getValorProdutos());
                jtfValorTotal.setText(Defaults.M_FORMAT.format(valorTotal));
            }
        }).setVisible(true);
    }//GEN-LAST:event_jbtnBuscarServicoActionPerformed

    private void jbtnRemoverServicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnRemoverServicoActionPerformed
        if (JOptionPane.showConfirmDialog(this, "Deseja realmente apagar este serviço?", "Confirmação", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
            try {
                Servico s = servicos.get(jtServicos.getSelectedRow());
                servicos.remove(s);
                valorTotal -= (s.getValor() + s.getValorProdutos());
                jtfValorTotal.setText(Defaults.M_FORMAT.format(valorTotal));
            } catch (Exception e) {
                Logger.save(e);
                JOptionPane.showMessageDialog(this, "Não foi possível apagar o serviço!", "Erro Interno", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jbtnRemoverServicoActionPerformed

    private void jbtnPagamentoUnicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnPagamentoUnicoActionPerformed
        if (cliente == null) {
            JOptionPane.showMessageDialog(this, "Você deve informar o cliente da consulta!", "Erro", JOptionPane.ERROR_MESSAGE);
        } else if (servicos.isEmpty() || valorTotal <= 0) {
            JOptionPane.showMessageDialog(this, "Você deve informar os serviços da consulta!", "Erro", JOptionPane.ERROR_MESSAGE);
        } else {
            new DialogoSalvarParcelaPagamento((Frame) getParent(), true, (pp) -> {
                pagamentos.add(pp);
            }, cliente, valorTotal).setVisible(true);     
        }
    }//GEN-LAST:event_jbtnPagamentoUnicoActionPerformed

    private void jbtnGerarParcelasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnGerarParcelasActionPerformed
        JOptionPane.showMessageDialog(this, "Coming soon...");
    }//GEN-LAST:event_jbtnGerarParcelasActionPerformed

    private void jbtnRemoverParcelaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnRemoverParcelaActionPerformed
        if (JOptionPane.showConfirmDialog(this, "Deseja realmente apagar esta parcela?", "Confirmação", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
            try {
                pagamentos.remove(jtPagamentos.getSelectedRow());
            } catch (Exception e) {
                Logger.save(e);
                JOptionPane.showMessageDialog(this, "Não foi possível apagar a parcela!", "Erro Interno", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jbtnRemoverParcelaActionPerformed

    private void jbtnEditarParcelaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnEditarParcelaActionPerformed
        int index = jtPagamentos.getSelectedRow();
        new DialogoSalvarParcelaPagamento((Frame) getParent(), true, (pp) -> {
            pagamentos.set(index, pp);
        }, cliente, pagamentos.get(index)).setVisible(true); 
    }//GEN-LAST:event_jbtnEditarParcelaActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton jbtnAdicionarServico;
    private javax.swing.JButton jbtnBuscarCliente;
    private javax.swing.JButton jbtnBuscarServico;
    private javax.swing.JButton jbtnCancelar;
    private javax.swing.JToggleButton jbtnEditarParcela;
    private javax.swing.JButton jbtnGerarParcelas;
    private javax.swing.JButton jbtnNovoCliente;
    private javax.swing.JButton jbtnPagamentoUnico;
    private javax.swing.JButton jbtnRemoverParcela;
    private javax.swing.JButton jbtnRemoverServico;
    private javax.swing.JButton jbtnSalvar;
    private org.jdesktop.swingx.JXDatePicker jdpDataDaConsulta;
    private javax.swing.JLabel jlCliente;
    private javax.swing.JLabel jlDataDaConsulta;
    private javax.swing.JLabel jlHoraFinal;
    private javax.swing.JLabel jlHoraInicial;
    private javax.swing.JLabel jlObservacoes;
    private javax.swing.JLabel jlPagamentosDaConsulta;
    private javax.swing.JLabel jlServicosPrestadosNaConsulta;
    private javax.swing.JLabel jlValorTotal;
    private javax.swing.JPanel jpAcoesPagamentos;
    private javax.swing.JPanel jpAcoesServicos;
    private javax.swing.JPanel jpConfirmar;
    private javax.swing.JPanel jpConfirmarEPagamentos;
    private javax.swing.JPanel jpDescricaoPagamentos;
    private javax.swing.JPanel jpDescricaoServicos;
    private javax.swing.JPanel jpEspacador;
    private javax.swing.JPanel jpGeral;
    private javax.swing.JPanel jpListaDePagamentos;
    private javax.swing.JPanel jpListaDeServicos;
    private javax.swing.JPanel jpPagamentos;
    private javax.swing.JPanel jpServicos;
    private javax.swing.JTable jtPagamentos;
    private javax.swing.JTable jtServicos;
    private javax.swing.JTextField jtfCliente;
    private javax.swing.JFormattedTextField jtfHoraFinal;
    private javax.swing.JFormattedTextField jtfHoraInicial;
    private javax.swing.JTextArea jtfObservacoes;
    private javax.swing.JTextField jtfValorTotal;
    private java.util.List<ParcelaPagamento> pagamentos;
    private java.util.List<Servico> servicos;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

}