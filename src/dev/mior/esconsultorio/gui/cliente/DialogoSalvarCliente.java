package dev.mior.esconsultorio.gui.cliente;

import dev.mior.esconsultorio.dao.EntityDAO;
import dev.mior.esconsultorio.defaults.Defaults;
import dev.mior.esconsultorio.entity.Cliente;
import dev.mior.esconsultorio.util.DialogUtil;
import dev.mior.esconsultorio.util.Logger;
import dev.mior.esconsultorio.util.Validar;
import java.text.ParseException;
import java.util.Date;
import java.util.function.Consumer;
import javax.swing.JOptionPane;

/**
 *
 * @author Mior
 */
public class DialogoSalvarCliente extends javax.swing.JDialog {

    /** User variables and constants */
    private Cliente cliente;
    private boolean cadastrar = false;
    private final Consumer<Cliente> action;
    private static final EntityDAO<Cliente> DAO = new EntityDAO<Cliente>(Cliente.class);
    
    /**
     * Creates new form DialogoSalvarCliente
     * @param parent
     * @param modal
     * @param action
     */
    public DialogoSalvarCliente(java.awt.Frame parent, boolean modal, Consumer<Cliente> action) {
        super(parent, modal);
        this.action = action;
        this.cadastrar = true;
        initComponents();
        DialogUtil.addEscapeListener(this);
    }
    
    /**
     * Creates new form DialogoSalvarCliente
     * @param parent
     * @param modal
     * @param action
     * @param cliente
     */
    public DialogoSalvarCliente(java.awt.Frame parent, boolean modal, Consumer<Cliente> action, Cliente cliente) {
        super(parent, modal);
        this.action = action;
        this.cadastrar = false;
        this.cliente = cliente;
        initComponents();
        initCliente();
        DialogUtil.addEscapeListener(this);
    }
    
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpConfirmar = new javax.swing.JPanel();
        jbtnSalvar = new javax.swing.JButton();
        jbtnCancelar = new javax.swing.JButton();
        jpGeral = new javax.swing.JPanel();
        jlNomeCompleto = new javax.swing.JLabel();
        jlCPF = new javax.swing.JLabel();
        jlEmail = new javax.swing.JLabel();
        jlTelefone = new javax.swing.JLabel();
        jtfNomeCompleto = new javax.swing.JTextField();
        jlRG = new javax.swing.JLabel();
        jtfCPF = new javax.swing.JFormattedTextField();
        jtfEmail = new javax.swing.JTextField();
        jtfTelefone = new javax.swing.JFormattedTextField();
        jtfRG = new javax.swing.JFormattedTextField();
        jlDataDeNascimento = new javax.swing.JLabel();
        jtfDataDeNascimento = new javax.swing.JFormattedTextField();
        jlSexo = new javax.swing.JLabel();
        jcbSexo = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle(cadastrar ? "Cadastrar Novo Cliente" : "Editar dados do Cliente");
        setBackground(new java.awt.Color(255, 255, 255));
        setName("dialogo"); // NOI18N
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jpConfirmar.setBackground(new java.awt.Color(255, 255, 255));
        jpConfirmar.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 30, 20));

        jbtnSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/save.png"))); // NOI18N
        jbtnSalvar.setMnemonic('S');
        jbtnSalvar.setText("Salvar");
        jbtnSalvar.setFocusable(false);
        jbtnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnSalvarActionPerformed(evt);
            }
        });
        jpConfirmar.add(jbtnSalvar);

        jbtnCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/cancel.png"))); // NOI18N
        jbtnCancelar.setMnemonic('C');
        jbtnCancelar.setText("Cancelar");
        jbtnCancelar.setFocusable(false);
        jbtnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCancelarActionPerformed(evt);
            }
        });
        jpConfirmar.add(jbtnCancelar);

        getContentPane().add(jpConfirmar, java.awt.BorderLayout.PAGE_END);

        jpGeral.setBackground(new java.awt.Color(255, 255, 255));

        jlNomeCompleto.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jlNomeCompleto.setText("Nome Completo:");

        jlCPF.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jlCPF.setText("CPF:");

        jlEmail.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jlEmail.setText("E-Mail:");

        jlTelefone.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jlTelefone.setText("Telefone:");

        jtfNomeCompleto.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jtfNomeCompleto.setToolTipText("Nome completo do Cliente");
        jtfNomeCompleto.setMargin(new java.awt.Insets(2, 1, 2, 1));

        jlRG.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jlRG.setText("RG:");

        try {
            jtfCPF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jtfCPF.setToolTipText("CPF do Cliente");
        jtfCPF.setFocusLostBehavior(javax.swing.JFormattedTextField.PERSIST);
        jtfCPF.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jtfCPF.setMargin(new java.awt.Insets(2, 1, 2, 1));

        jtfEmail.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jtfEmail.setToolTipText("E-Mail do Cliente");
        jtfEmail.setMargin(new java.awt.Insets(2, 1, 2, 1));

        try {
            jtfTelefone.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("(##) #########")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jtfTelefone.setToolTipText("Telefone do Cliente");
        jtfTelefone.setFocusLostBehavior(javax.swing.JFormattedTextField.PERSIST);
        jtfTelefone.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jtfTelefone.setMargin(new java.awt.Insets(2, 1, 2, 1));

        try {
            jtfRG.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##########")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jtfRG.setToolTipText("RG do Cliente");
        jtfRG.setFocusLostBehavior(javax.swing.JFormattedTextField.PERSIST);
        jtfRG.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jtfRG.setMargin(new java.awt.Insets(2, 1, 2, 1));

        jlDataDeNascimento.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jlDataDeNascimento.setText("Data Nascimento:");

        try {
            jtfDataDeNascimento.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jtfDataDeNascimento.setToolTipText("Data de Nascimento do Cliente");
        jtfDataDeNascimento.setFocusLostBehavior(javax.swing.JFormattedTextField.PERSIST);
        jtfDataDeNascimento.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jtfDataDeNascimento.setMargin(new java.awt.Insets(2, 1, 2, 1));

        jlSexo.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jlSexo.setText("Sexo:");

        jcbSexo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Feminino", "Masculino" }));
        jcbSexo.setToolTipText("Sexo do Cliente");
        jcbSexo.setFocusable(false);

        javax.swing.GroupLayout jpGeralLayout = new javax.swing.GroupLayout(jpGeral);
        jpGeral.setLayout(jpGeralLayout);
        jpGeralLayout.setHorizontalGroup(
            jpGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpGeralLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jpGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlNomeCompleto, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jlCPF, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jlEmail, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jlTelefone, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jlDataDeNascimento, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(5, 5, 5)
                .addGroup(jpGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jtfNomeCompleto)
                    .addComponent(jtfEmail)
                    .addComponent(jtfTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jpGeralLayout.createSequentialGroup()
                        .addComponent(jtfCPF, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(jlRG)
                        .addGap(5, 5, 5)
                        .addComponent(jtfRG))
                    .addGroup(jpGeralLayout.createSequentialGroup()
                        .addComponent(jtfDataDeNascimento, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                        .addComponent(jlSexo)
                        .addGap(5, 5, 5)
                        .addComponent(jcbSexo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(58, Short.MAX_VALUE))
        );
        jpGeralLayout.setVerticalGroup(
            jpGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpGeralLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlNomeCompleto)
                    .addComponent(jtfNomeCompleto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jpGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlCPF)
                    .addComponent(jtfCPF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlRG)
                    .addComponent(jtfRG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jpGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlEmail)
                    .addComponent(jtfEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jpGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlTelefone)
                    .addComponent(jtfTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpGeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlDataDeNascimento)
                    .addComponent(jtfDataDeNascimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlSexo)
                    .addComponent(jcbSexo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        getContentPane().add(jpGeral, java.awt.BorderLayout.CENTER);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void initCliente() {
        if (cliente != null) {
            jtfNomeCompleto.setText(cliente.getNome());
            jtfCPF.setText(cliente.getCpf());
            jtfRG.setText(cliente.getRg());
            jtfEmail.setText(cliente.getEmail());
            jtfTelefone.setText(cliente.getTelefone());
            jcbSexo.setSelectedIndex(cliente.getSexo() == 'F' ? 0 : 1);
            if (cliente.getDataNascimento() != null) 
                jtfDataDeNascimento.setText(Defaults.D_FORMAT.format(cliente.getDataNascimento()));
        }
    }
    
    private boolean camposEstaoVazios() {
        String nome = jtfNomeCompleto.getText().trim();
        String cpf = jtfCPF.getText().replace(" ", "");
        String rg = jtfRG.getText().replace(" ", "");
        String email = jtfEmail.getText().replace(" ", "");
        String telefone = jtfTelefone.getText().replace(" ", "");
        return cadastrar && nome.length() < 3 && cpf.length() < 4 && rg.isEmpty() && email.isEmpty() && telefone.length() < 5;
    }
    
    private void showQuitDialog() {
        String mensagem = cadastrar ? "Você realmente deseja cancelar o cadastro do cliente?" : "Você realmente deseja cancelar a edição dos dados do cliente?";
        if (camposEstaoVazios() || JOptionPane.showConfirmDialog(this, mensagem, "Confirmação", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
            this.dispose();
        }
    }
    
    private void jbtnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCancelarActionPerformed
        showQuitDialog();
    }//GEN-LAST:event_jbtnCancelarActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        showQuitDialog();
    }//GEN-LAST:event_formWindowClosing
	
    private void jbtnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnSalvarActionPerformed
        String nome = jtfNomeCompleto.getText().trim();
        String cpf = jtfCPF.getText().trim();
        String rg = jtfRG.getText().replace(" ", "");
        String email = jtfEmail.getText().trim();
        String telefone = jtfTelefone.getText().trim();
        String data = jtfDataDeNascimento.getText().replace(" ", "");
        String sexo = jcbSexo.getSelectedItem().toString().toUpperCase().trim();
        
        if (cadastrar) {
            cliente = new Cliente();
        }
        
        if (nome.length() < 3) {
            JOptionPane.showMessageDialog(this, "Você deve informar o nome do cliente!", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        } else {
            cliente.setNome(nome);
        }
        
        if (telefone.length() <= 4) {
            JOptionPane.showMessageDialog(this, "Você deve informar o telefone do cliente para contato!", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }
                
        if (telefone.replace(") ", "__").replace(" ", "").length() < 13) {
            JOptionPane.showMessageDialog(this, "O telefone informado não é valido!", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        } else {
            cliente.setTelefone(telefone);
        }
             
        if (cpf.replace(" ", "").length() > 3) {
            if (!Validar.CPF(cpf)) {
                JOptionPane.showMessageDialog(this, "O CPF informado não é valido!", "Erro", JOptionPane.ERROR_MESSAGE);
                return;
            } else if ((cadastrar || (cliente.getCpf() != null && !cliente.getCpf().equals(cpf))) && DAO.findEntityByColumn("cpf", cpf) != null) {
                JOptionPane.showMessageDialog(this, "Um cliente já foi cadastrado com este CPF!", "Erro", JOptionPane.ERROR_MESSAGE);
                return;
            } else {
                cliente.setCpf(cpf);
            }
        } else {
            cliente.setCpf(null);
        }
        
        if (rg.length() > 0) {
            if (!Validar.RG(rg)) {
                JOptionPane.showMessageDialog(this, "O RG informado não é valido!", "Erro", JOptionPane.ERROR_MESSAGE);
                return;
            } else if ((cadastrar || (cliente.getRg() != null && !cliente.getRg().equals(rg))) && DAO.findEntityByColumn("rg", rg) != null) {
                JOptionPane.showMessageDialog(this, "Um cliente já foi cadastrado com este RG!", "Erro", JOptionPane.ERROR_MESSAGE);
                return;
            } else {
                cliente.setRg(rg);
            }
        } else {
            cliente.setRg(null);
        }
        
        if (data.length() > 2) {
            if (data.length() != 10) {
                JOptionPane.showMessageDialog(this, "A data de nascimento informado não é valida!", "Erro", JOptionPane.ERROR_MESSAGE);
                return;
            } else {
                try {
                    Date dataNascimento = Defaults.D_FORMAT.parse(data);
                    cliente.setDataNascimento(dataNascimento);
                } catch (ParseException e) {
                    JOptionPane.showMessageDialog(this, "A data de nascimento informado não é valida!", "Erro", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
        } else {
            cliente.setDataNascimento(null);
        }
        
        if (email.length() > 0) {
            if (!Validar.email(email)) {
                JOptionPane.showMessageDialog(this, "O E-Mail informado não é valido!", "Erro", JOptionPane.ERROR_MESSAGE);
                return;
            } else if ((cadastrar || (cliente.getEmail() != null && !cliente.getEmail().equals(email))) && DAO.findEntityByColumn("email", email) != null) {
                JOptionPane.showMessageDialog(this, "Um cliente já foi cadastrado com este E-Mail!", "Erro", JOptionPane.ERROR_MESSAGE);
                return;
            } else {
                cliente.setEmail(email);
            }
        } else {
            cliente.setEmail(null);
        }
        
        if (sexo != null) {
            cliente.setSexo(sexo.charAt(0));
        }
             
        try {
            if (cadastrar) {
                DAO.create(cliente);
                JOptionPane.showMessageDialog(this, "Cliente cadastrado com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
            } else {
                DAO.edit(cliente);
                JOptionPane.showMessageDialog(this, "Dados do cliente editados com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
            }
            if (action != null) {
                action.accept(cliente);
            }
            this.dispose();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao tentar salvar o cliente!", "Erro Desconhecido", JOptionPane.ERROR_MESSAGE);
            Logger.save(e);
        }
    }//GEN-LAST:event_jbtnSalvarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbtnCancelar;
    private javax.swing.JButton jbtnSalvar;
    private javax.swing.JComboBox<String> jcbSexo;
    private javax.swing.JLabel jlCPF;
    private javax.swing.JLabel jlDataDeNascimento;
    private javax.swing.JLabel jlEmail;
    private javax.swing.JLabel jlNomeCompleto;
    private javax.swing.JLabel jlRG;
    private javax.swing.JLabel jlSexo;
    private javax.swing.JLabel jlTelefone;
    private javax.swing.JPanel jpConfirmar;
    private javax.swing.JPanel jpGeral;
    private javax.swing.JFormattedTextField jtfCPF;
    private javax.swing.JFormattedTextField jtfDataDeNascimento;
    private javax.swing.JTextField jtfEmail;
    private javax.swing.JTextField jtfNomeCompleto;
    private javax.swing.JFormattedTextField jtfRG;
    private javax.swing.JFormattedTextField jtfTelefone;
    // End of variables declaration//GEN-END:variables

}